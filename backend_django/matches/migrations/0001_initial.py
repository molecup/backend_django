# Generated by Django 5.2.7 on 2025-10-28 17:52

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='LocalLeague',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=20, unique=True, verbose_name='Unique slug')),
                ('name', models.CharField(max_length=50, verbose_name='Local League Name')),
                ('title', models.CharField(max_length=100, verbose_name='League page full title')),
                ('subtitle', models.CharField(blank=True, max_length=200, verbose_name='League page subtitle')),
            ],
        ),
        migrations.CreateModel(
            name='Stadium',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Stadium name')),
                ('address', models.CharField(max_length=100, verbose_name='Stadium address')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Stadium latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='Stadium longitude')),
                ('local_leagues', models.ManyToManyField(related_name='stadiums', to='matches.localleague', verbose_name='Local leagues that use this stadium')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(verbose_name='Match date and time')),
                ('registration_required', models.BooleanField(default=False, verbose_name='Is registration available for this match?')),
                ('registration_link', models.URLField(blank=True, null=True, verbose_name='Registration link')),
                ('score_computation_mode', models.CharField(choices=[('EVENTS', 'Automatic from events'), ('OFFSET', 'Manual offset only'), ('SUM', 'Sum of events and offset')], default='EVENTS', help_text='Method to compute the displayed score', max_length=10, verbose_name='Score computation mode')),
                ('finished', models.BooleanField(default=False, verbose_name='Is the match finished?')),
                ('stadium', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches', to='matches.stadium', verbose_name='Stadium where the match is played')),
            ],
            options={
                'verbose_name_plural': 'Matches',
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=20, unique=True, verbose_name='Unique slug')),
                ('name', models.CharField(max_length=50, verbose_name='Full name')),
                ('short_name', models.CharField(max_length=20, verbose_name='Short name')),
                ('local_league', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='teams', to='matches.localleague', verbose_name='Local league to which the team belongs')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30, verbose_name='First name')),
                ('last_name', models.CharField(max_length=30, verbose_name='Last name')),
                ('shirt_number', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(99, message='Shirt number cannot exceed 99'), django.core.validators.MinValueValidator(1, message='Shirt number must be at least 1')], verbose_name='Shirt number')),
                ('position', models.CharField(blank=True, choices=[('POR', 'Portiere'), ('DIF', 'Difensore'), ('CEN', 'Centrocampista'), ('ATT', 'Attaccante')], max_length=5, null=True, verbose_name='Playing position')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='matches.team', verbose_name='Team to which the player belongs')),
            ],
        ),
        migrations.CreateModel(
            name='TeamParticipationMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_home', models.BooleanField(default=False, verbose_name='Is this the home team?')),
                ('score_offset', models.SmallIntegerField(default=0, help_text='Adjust the displayed score for this team by this offset (can be negative)', verbose_name='Score offset for this team')),
                ('penalties', models.PositiveSmallIntegerField(default=0, verbose_name='Penalties scored by this team')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matches.match', verbose_name='Match in which the team is participating')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='matches.team', verbose_name='Team participating in the match')),
            ],
            options={
                'unique_together': {('is_home', 'match')},
            },
        ),
        migrations.CreateModel(
            name='MatchEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.PositiveSmallIntegerField(blank=True, help_text='Enter the minute of the event (0-120)', null=True, validators=[django.core.validators.MaxValueValidator(120, message='Minute cannot exceed 120'), django.core.validators.MinValueValidator(0, message='Minute must be at least 0')], verbose_name='Minute of the event')),
                ('event_type', models.CharField(choices=[('GOAL', 'Goal'), ('YELLOW_CARD', 'Yellow Card'), ('RED_CARD', 'Red Card')], default='GOAL', help_text='Select the type of event', max_length=15, verbose_name='Type of event')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='match_events', to='matches.player', verbose_name='Player involved in the event')),
                ('team_match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='matches.teamparticipationmatch', verbose_name='Match and Team to which the event belongs')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='teams',
            field=models.ManyToManyField(related_name='matches', through='matches.TeamParticipationMatch', to='matches.team', verbose_name='Teams participating in the match'),
        ),
    ]
